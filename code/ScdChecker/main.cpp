/*
 *  @file  : main.cpp
 *  @author: luteng
 *  @date  : 2015-06-17 14:01:58.533
 *  @note  : Generated by SlxTemplates
 */

#include "OutputMgr.h"
#include "ConfigMgr.h"
#include "ScdChecker.h"
#include "CacheMgr.h"
#include "CheckItems/_InitAllCheckItems.h"
#include <stdio.h>
#include <Shlwapi.h>
#pragma warning(disable: 4786)
#include <iostream>
#include <string>

using namespace std;

bool CheckArguments(int argc, char *argv[])
{
    do
    {
        if (argc < 3)
        {
            COutputMgr::GetInstance()->Error(
                "Arguments error：\r\n"
                "ScdChecker.exe cfg_file_path scd_file_path [utf8|ansi]\r\n");
            break;
        }

        if (argc >= 4)
        {
            if (lstrcmpiA(argv[3], "utf8") == 0)
            {
                COutputMgr::GetInstance()->ChangeOutputMode(OH_OUTPUT, OC_UTF8);
                COutputMgr::GetInstance()->ChangeOutputMode(OH_ERROR, OC_UTF8);
            }
            else if (lstrcmpiA(argv[3], "ansi") == 0)
            {
                // as default
            }
            else
            {
                COutputMgr::GetInstance()->Error(
                    "Arguments error：\r\n"
                    "ScdChecker.exe cfg_file_path scd_file_path [utf8|ansi]\r\n");
                break;
            }
        }

        if (!PathFileExistsA(argv[1]))
        {
            COutputMgr::GetInstance()->Error(
                "%s文件不存在\r\n",
                argv[1]);
            break;
        }

        if (!PathFileExistsA(argv[2]))
        {
            COutputMgr::GetInstance()->Error(
                "%s文件不存在\r\n",
                argv[2]);
            break;
        }

        return true;

    } while (false);

    return false;
}

// 主函数，参数结构：
// ScdChecker.exe cfg_file_path scd_file_path [utf8|ansi]
int main(int argc, char *argv[])
{
    setlocale(LC_ALL, "chs");
    const char *lpConfigFilePath = argv[1];
    const char *lpScdFilePath = argv[2];

    if (!COutputMgr::InitializeInstance())
    {
        COutputMgr::GetInstance()->Error("COutputMgr::InitializeInstance()失败\r\n");
        return 1;
    }

    if (!CheckArguments(argc, argv))
    {
        return 7;
    }

    if (GetCommandLineA() != NULL)
    {
        DumpStringToFile<char>(string("当前命令行：") + string(GetCommandLineA()), "cmd.txt");
    }

    if (!CConfigMgr::InitializeInstance())
    {
        COutputMgr::GetInstance()->Error("CConfigMgr::InitializeInstance()失败\r\n");
        return 2;
    }

    if (!CConfigMgr::GetInstance()->SetConfigFilePath(lpConfigFilePath))
    {
        COutputMgr::GetInstance()->Error("CConfigMgr::GetInstance()->SetConfigFilePath()失败\r\n");
        return 3;
    }

    if (!CCacheMgr::InitializeInstance())
    {
        COutputMgr::GetInstance()->Error("CScdChecker::InitializeInstance()失败\r\n");
        return 4;
    }

    if (!CScdChecker::InitializeInstance())
    {
        COutputMgr::GetInstance()->Error("CScdChecker::InitializeInstance()失败\r\n");
        return 5;
    }

    if (!InitAllCheckItems())
    {
        COutputMgr::GetInstance()->Error("InitAllCheckItems()失败\r\n");
        return 6;
    }

#ifdef _DEBUG
//     CConfigMgr::GetInstance()->GenerateFiles();
//     return 0;
#endif

    if (CScdChecker::GetInstance()->SetFilePathToCheck(lpScdFilePath) &&
        CScdChecker::GetInstance()->CheckStart() &&
        CScdChecker::GetInstance()->CheckAll() &&
        CScdChecker::GetInstance()->CheckEnd())
    {
        return 0;
    }

    return 13;
}