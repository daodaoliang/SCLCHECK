/*
 *  @file  : ScdIcdCheckService_Main.cpp
 *  @author: user
 *  @date  : 2015-08-28 16:33:28.452
 *  @note  : Generated by SlxTemplates
 */

#include <WinSock2.h>
#include <Windows.h>
#include <Shlwapi.h>
#include "ScdIcdCheckService_ServiceTools.h"
#include "ScdIcdCheckService_ServiceWork.h"
#include "ScdIcdCheckService_ServiceMain.h"
#include "../gsoap/ScdIcdChecker.nsmap"
#include "resource.h"
#pragma warning(disable: 4786)
#include <tchar.h>
#include <strsafe.h>

#pragma comment(lib, "Shlwapi.lib")

using namespace ScdIcdCheckService_ServiceTools;

static INT_PTR CALLBACK StartupDlgProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
#define AUTO_CLICK_TIMER (12)

#ifndef BCM_SETSHIELD
#define BCM_SETSHIELD            (0x1600 + 0x000C)
#endif

    switch (uMsg)
    {
    case WM_INITDIALOG:{
        HICON hIcon = LoadIcon((HINSTANCE)lParam, MAKEINTRESOURCE(IDI_MAINFRAME));

        SendMessage(hwndDlg, WM_SETICON, ICON_BIG, (LPARAM)hIcon);
        SendMessage(hwndDlg, WM_SETICON, ICON_SMALL, (LPARAM)hIcon);

        SetWindowText(hwndDlg, TEXT("ScdIcdCheckService Startup"));

        SetTimer(hwndDlg, AUTO_CLICK_TIMER, 1000, NULL);

        SendDlgItemMessage(hwndDlg, IDC_INSTALL, BCM_SETSHIELD, 0, TRUE);
        SendDlgItemMessage(hwndDlg, IDC_UNINSTALL, BCM_SETSHIELD, 0, TRUE);

        break;}

    case WM_COMMAND:
        if (HIWORD(wParam) == BN_CLICKED && IsWindow((HWND)lParam))
        {
            KillTimer(hwndDlg, AUTO_CLICK_TIMER);
            EndDialog(hwndDlg, LOWORD(wParam));
        }
        break;

    case WM_CLOSE:
        KillTimer(hwndDlg, AUTO_CLICK_TIMER);
        EndDialog(hwndDlg, IDCANCEL);
        break;

    case WM_TIMER:
        if (AUTO_CLICK_TIMER == wParam)
        {
            static int nTimerCount = 8;
            static TCHAR szButtonText[1024] = TEXT("");

            if (szButtonText[0] == TEXT('\0'))
            {
                GetDlgItemText(hwndDlg, IDC_USERMODE, szButtonText, RTL_NUMBER_OF(szButtonText));
            }

            if (--nTimerCount <= 0)
            {
                KillTimer(hwndDlg, AUTO_CLICK_TIMER);
                EndDialog(hwndDlg, IDC_USERMODE);
            }
            else
            {
                TCHAR szButtonNewText[1024 + 20];

                StringCchPrintf(szButtonNewText, RTL_NUMBER_OF(szButtonNewText), TEXT("%s - %u"), szButtonText, nTimerCount);
                SetDlgItemText(hwndDlg, IDC_USERMODE, szButtonNewText);
            }
        }
        break;

    default:
        break;
    }

    return FALSE;
}

static int InstallHanlder(HINSTANCE hInstance)
{
    if (!ToolForkForElevat(TEXT("-i -elevated")))
    {
        if (ToolInstallLocalServerService(NULL) && ToolStartLocalServerService(NULL))
        {
            ToolMessageBoxFormat(NULL, TEXT("info"), MB_ICONINFORMATION | MB_SYSTEMMODAL, TEXT("服务已安装并成功启动"));
        }
    }

    return 0;
}

static int UninstallHanlder(HINSTANCE hInstance)
{
    if (!ToolForkForElevat(TEXT("-u -elevated")))
    {
        if (ToolStopLocalServerService(NULL) && ToolUninstallLocalServerService(NULL))
        {
            ToolMessageBoxFormat(NULL, TEXT("info"), MB_ICONINFORMATION | MB_SYSTEMMODAL, TEXT("服务已停止并成功卸载"));
        }
    }

    return 0;
}

static DWORD CALLBACK MessageBoxProc(LPVOID lpParam)
{
    HANDLE hStopEvent = lpParam;

    MessageBox(
        NULL,
        TEXT("ScdIcdCheckService work-thread is Running, click Ok to exit..."),
        TEXT("ScdIcdCheckService info"),
        MB_ICONINFORMATION | MB_SYSTEMMODAL);
    SetEvent(hStopEvent);

    return 0;
}

static int UserModeHanlder(HINSTANCE hInstance)
{
    HANDLE hStopEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
    HANDLE hWorkThread = CreateThread(NULL, 0, ScdIcdCheckServiceWorkProc, hStopEvent, 0, NULL);
    HANDLE hMsgBoxThread = CreateThread(NULL, 0, MessageBoxProc, hStopEvent, 0, NULL);

    WaitForSingleObject(hWorkThread, INFINITE);

    if (WaitForSingleObject(hStopEvent, 0) == WAIT_TIMEOUT)
    {
        TerminateThread(hMsgBoxThread, 0);
        MessageBox(NULL, TEXT("ScdIcdCheckService work-thread exited itself"), TEXT("ScdIcdCheckService info"), MB_ICONINFORMATION | MB_SYSTEMMODAL);
    }

    CloseHandle(hWorkThread);
    CloseHandle(hMsgBoxThread);
    CloseHandle(hStopEvent);

    return 0;
}

static int UserModeBackgroundHanlder(HINSTANCE hInstance)
{
    HANDLE hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);
    ScdIcdCheckServiceWorkProc(hEvent);
    CloseHandle(hEvent);

    return 0;
}

static int UserDefinedHanlder(HINSTANCE hInstance)
{
    MessageBox(NULL, TEXT("User-defined function called..."), TEXT("info"), MB_ICONINFORMATION | MB_SYSTEMMODAL);
    return 0;
}

int APIENTRY _tWinMain(HINSTANCE hInstance, HINSTANCE, LPTSTR, int)
{
    setlocale(LC_ALL, "chs");
    if (__argc >= 3 && lstrcmpi(__targv[2], TEXT("-elevated")) == 0 && ToolNeedToElevat())
    {
        MessageBox(NULL, TEXT("Run as administrator failed."), NULL, MB_ICONERROR);
        return 1;
    }

    if (__argc == 1)
    {
        switch (DialogBoxParam(hInstance, MAKEINTRESOURCE(IDD_STARTUP), NULL, StartupDlgProc, (LPARAM)hInstance))
        {
        case IDC_INSTALL:
            return InstallHanlder(hInstance);

        case IDC_UNINSTALL:
            return UninstallHanlder(hInstance);

        case IDC_USERMODE:
            return UserModeHanlder(hInstance);

        case IDC_USERMODE_BACKGROUND:
            return UserModeBackgroundHanlder(hInstance);

        case IDC_USER_DEFINED:
            return UserDefinedHanlder(hInstance);

        default:
            break;
        }
    }
    else if (lstrcmpi(__targv[1], TEXT("-t")) == 0)
    {
        return UserModeHanlder(hInstance);
    }
    else if (lstrcmpi(__targv[1], TEXT("-debug")) == 0 || lstrcmpi(__targv[1], TEXT("-d")) == 0)
    {
        return UserModeBackgroundHanlder(hInstance);
    }
    else if (lstrcmpi(__targv[1], TEXT("-i")) == 0)
    {
        return InstallHanlder(hInstance);
    }
    else if (lstrcmpi(__targv[1], TEXT("-u")) == 0)
    {
        return UninstallHanlder(hInstance);
    }
    else if (lstrcmpi(__targv[1], TEXT("-service")) == 0)
    {
        SERVICE_TABLE_ENTRY ste[] = {
            {_SERVER_SERVICE_NAME, ScdIcdCheckService_ServiceMainProc},
            {NULL, NULL},
        };

        StartServiceCtrlDispatcher(ste);
    }

    return 0;
}