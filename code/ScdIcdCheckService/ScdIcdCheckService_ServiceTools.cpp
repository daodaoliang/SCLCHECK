/*
 *  @file  : ScdIcdCheckService_ServiceTools.cpp
 *  @author: luteng
 *  @date  : 2015-08-28 16:33:28.452
 *  @note  : Generated by SlxTemplates
 */

#include "ScdIcdCheckService_ServiceTools.h"
#include <Windows.h>
#include <Shlwapi.h>

namespace ScdIcdCheckService_ServiceTools {

class CHandle
{
public:
    CHandle()
    {
        m_hObject = NULL;
    }

    CHandle(const HANDLE hObject)
    {
        this->m_hObject = hObject;
    }

    ~CHandle()
    {
        if (m_hObject != NULL)
        {
            CloseHandle(m_hObject);
        }
    }

    operator HANDLE () const
    {
        return m_hObject;
    }

private:
    HANDLE m_hObject;
};

class CServiceHandle
{
public:
    CServiceHandle()
    {
        m_hObject = NULL;
    }

    CServiceHandle(const SC_HANDLE hObject)
    {
        this->m_hObject = hObject;
    }

    ~CServiceHandle()
    {
        if (m_hObject != NULL)
        {
            CloseServiceHandle(m_hObject);
        }
    }

    operator SC_HANDLE () const
    {
        return m_hObject;
    }

private:
    SC_HANDLE m_hObject;
};

int ToolMessageBoxFormat(HWND hWindow, LPCTSTR lpCaption, UINT uType, LPCTSTR pFmt, ...)
{
    TCHAR szText[4096];
    va_list val;

    va_start(val, pFmt);
    wvnsprintf(szText, sizeof(szText) / sizeof(TCHAR), pFmt, val);
    va_end(val);

#if MSGBOXSLIENT
    OutputDebugString(szText);
    return 0;
#else
    return MessageBox(hWindow, szText, lpCaption, uType);
#endif
}

BOOL CheckLocalServerRunningByServiceManager()
{
    CServiceHandle hScm = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);

    if (hScm != NULL)
    {
        CServiceHandle hService = OpenService(hScm, _SERVER_SERVICE_NAME, SERVICE_QUERY_STATUS);

        if (hService != NULL)
        {
            SERVICE_STATUS status;

            if (QueryServiceStatus(hService, &status))
            {
                return status.dwCurrentState == SERVICE_RUNNING;
            }
        }
    }

    return FALSE;
}

BOOL CheckLocalServerServiceInstalled()
{
    CServiceHandle hScm = (SC_HANDLE)OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);

    if (hScm != NULL)
    {
        CServiceHandle hService = OpenService(hScm, _SERVER_SERVICE_NAME, SERVICE_QUERY_STATUS);

        if (hService != NULL)
        {
            return TRUE;
        }
    }

    return FALSE;
}

BOOL ToolInstallLocalServerService(HWND hWindow)
{
    CServiceHandle hScm = (SC_HANDLE)OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);

    if (hScm != NULL)
    {
        TCHAR szDependencies[] = TEXT("tcpip\0\0\0");
        CServiceHandle hService = OpenService(hScm, _SERVER_SERVICE_NAME, SERVICE_ALL_ACCESS);
        TCHAR szImagePath[MAX_PATH + 30] = TEXT("");

        GetModuleFileName(GetModuleHandle(NULL), szImagePath, MAX_PATH);
        PathQuoteSpaces(szImagePath);
        StrCatBuff(szImagePath, TEXT(" -service"), RTL_NUMBER_OF(szImagePath));

        if (hService == NULL)
        {
            hService = CreateService(
                hScm,
                _SERVER_SERVICE_NAME,
                _SERVER_SERVICE_DISPLAY_NAME,
                SERVICE_ALL_ACCESS,
                SERVICE_WIN32_OWN_PROCESS | SERVICE_INTERACTIVE_PROCESS,
                SERVICE_AUTO_START,
                SERVICE_ERROR_NORMAL,
                szImagePath,
                NULL,
                NULL,
                szDependencies,
                NULL,
                NULL
                );
        }
        else
        {
            ChangeServiceConfig(
                hService,
                SERVICE_WIN32_OWN_PROCESS | SERVICE_INTERACTIVE_PROCESS,
                SERVICE_AUTO_START,
                SERVICE_ERROR_NORMAL,
                szImagePath,
                NULL,
                NULL,
                szDependencies,
                NULL,
                NULL,
                _SERVER_SERVICE_DISPLAY_NAME
                );
        }

        if (hService != NULL)
        {
            SERVICE_DESCRIPTION sdArgument = {_SERVER_SERVICE_DESCRIPTION};

            ChangeServiceConfig2(hService, SERVICE_CONFIG_DESCRIPTION, &sdArgument);

            return TRUE;
        }
        else
        {
            ToolMessageBoxFormat(hWindow, NULL, MB_ICONERROR, TEXT("安装或更改服务配置失败，错误码：%lu"), GetLastError());
        }
    }
    else
    {
        ToolMessageBoxFormat(hWindow, NULL, MB_ICONERROR, TEXT("打开服务管理器失败，错误码：%lu"), GetLastError());
    }

    return FALSE;
}

BOOL ToolUninstallLocalServerService(HWND hWindow)
{
    CServiceHandle hScm = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);

    if (hScm != NULL)
    {
        CServiceHandle hService = OpenService(hScm, _SERVER_SERVICE_NAME, SERVICE_ALL_ACCESS);

        if (hService != NULL)
        {
            if (DeleteService(hService))
            {
                return TRUE;
            }
            else
            {
                ToolMessageBoxFormat(hWindow, NULL, MB_ICONINFORMATION, TEXT("删除服务失败，错误码：%lu。"), GetLastError());
            }
        }
        else
        {
            ToolMessageBoxFormat(hWindow, NULL, MB_ICONERROR, TEXT("打开服务失败，错误码：%lu"), GetLastError());
        }
    }
    else
    {
        ToolMessageBoxFormat(hWindow, NULL, MB_ICONERROR, TEXT("打开服务管理器失败，错误码：%lu"), GetLastError());
    }

    return FALSE;
}

BOOL ToolStartLocalServerService(HWND hWindow)
{
    CServiceHandle hScm = (SC_HANDLE)OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);

    if (hScm != NULL)
    {
        CServiceHandle hService = OpenService(hScm, _SERVER_SERVICE_NAME, SERVICE_ALL_ACCESS);

        if (hService != NULL)
        {
            if (StartService(hService, 0, NULL))
            {
                return TRUE;
            }
            else
            {
                ToolMessageBoxFormat(hWindow, NULL, MB_ICONERROR, TEXT("启动服务失败，错误码：%lu"), GetLastError());
            }
        }
        else
        {
            ToolMessageBoxFormat(hWindow, NULL, MB_ICONERROR, TEXT("打开服务失败，错误码：%lu"), GetLastError());
        }
    }
    else
    {
        ToolMessageBoxFormat(hWindow, NULL, MB_ICONERROR, TEXT("打开服务管理器失败，错误码：%lu"), GetLastError());
    }

    return FALSE;
}

BOOL ToolStopLocalServerService(HWND hWindow)
{
    CServiceHandle hScm = (SC_HANDLE)OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);

    if (hScm != NULL)
    {
        CServiceHandle hService = OpenService(hScm, _SERVER_SERVICE_NAME, SERVICE_ALL_ACCESS);

        if (hService != NULL)
        {
            SERVICE_STATUS status;

            if (QueryServiceStatus(hService, &status))
            {
                if (status.dwCurrentState == SERVICE_STOPPED)
                {
                    return TRUE;
                }

                if (status.dwCurrentState == SERVICE_STOP_PENDING || ControlService(hService, SERVICE_CONTROL_STOP, &status))
                {
                    int nTryCount = 0;
                    for (; nTryCount < 10; nTryCount += 1)
                    {
                        if (QueryServiceStatus(hService, &status) && status.dwCurrentState == SERVICE_STOPPED)
                        {
                            return TRUE;
                        }

                        Sleep(1003);
                    }

                    ToolMessageBoxFormat(hWindow, NULL, MB_ICONERROR, TEXT("已向服务发送停止命令，但是服务仍在运行"));
                }
                else
                {
                    ToolMessageBoxFormat(hWindow, NULL, MB_ICONERROR, TEXT("向服务发送停止命令失败，错误码：%lu"), GetLastError());
                }
            }
        }
        else
        {
            ToolMessageBoxFormat(hWindow, NULL, MB_ICONERROR, TEXT("打开服务失败，错误码：%lu"), GetLastError());
        }
    }
    else
    {
        ToolMessageBoxFormat(hWindow, NULL, MB_ICONERROR, TEXT("打开服务管理器失败，错误码：%lu"), GetLastError());
    }

    return FALSE;
}

static BOOL IsAdminMode()
{
    BOOL bIsElevated = FALSE;
    HANDLE hToken = NULL;

    if (OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &hToken))
    {
        DWORD dwReturnLength = 0;
        struct
        {
            DWORD TokenIsElevated;
        } te;

        if (GetTokenInformation(hToken, (TOKEN_INFORMATION_CLASS)20, &te, sizeof(te), &dwReturnLength))
        {
            if (dwReturnLength == sizeof(te))
            {
                bIsElevated = !!te.TokenIsElevated;
            }
        }

        CloseHandle(hToken);
    }

    return bIsElevated;
}

static BOOL Elevat(LPCTSTR lpArgument)
{
    TCHAR szSelfPath[MAX_PATH];

    GetModuleFileName(GetModuleHandle(NULL), szSelfPath, RTL_NUMBER_OF(szSelfPath));

    return (int)ShellExecute(NULL, TEXT("RUNAS"), szSelfPath, lpArgument, NULL, SW_SHOW) > 32;
}

BOOL ToolNeedToElevat()
{
    OSVERSIONINFO osi = {sizeof(osi)};

    GetVersionEx(&osi);

    if (osi.dwMajorVersion < 6)
    {
        return FALSE;
    }

    if (IsAdminMode())
    {
        return FALSE;
    }

    return TRUE;
}

BOOL ToolForkForElevat(LPCTSTR lpArgument)
{
    if (!ToolNeedToElevat())
    {
        return FALSE;
    }

    if (!Elevat(lpArgument))
    {
        return FALSE;
    }

    return TRUE;
}

}; // namespace ScdIcdCheckService_ServiceTools